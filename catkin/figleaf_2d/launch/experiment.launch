<launch>
  <arg name="user" /> <!-- User name or ID -->
  <!-- Type of filter to use. "filter" is used for naming the rosbag. "clean",
       "box", etc. turn the appropriate features on or off. -->
  <arg name="filter" />
  <arg name="clean" default="False" />
  <arg name="blur" default="False" />
  <arg name="mid" default="False" />
  <arg name="box" default="False" />
  <arg name="data_dir" /> <!-- Where to save rosbag data. -->

  <!-- All conditions:
       1) Run Kinect MLD publisher (via Kinect Stream rviz plugin)
       2) Send /kinect_mld to robot_self_filter
       3) /kinect_mld_filtered goes to tabletop segmenter. -->
  <!--node pkg="robot_self_filter" type="self_filter" respawn="true" name="mld_self_filter" 
    output="screen">                                                         
    <remap from="cloud_in" to="/kinect_mld" />
    <remap from="cloud_out" to="/kinect_mld_filtered" />
    <param name="sensor_frame" type="string" value="/head_mount_kinect_rgb_optical_frame" />
    <param name="subsample_value" type="double" value=".02"/>
    <rosparam command="load" file="$(find pr2_arm_navigation_perception)/config/self_filter_right_left.yaml" />
  </node-->
  <node pkg="robot_self_filter_color" type="self_filter_color" respawn="true" name="mld_self_filter_color">
    <remap from="cloud_in" to="/kinect_mld" />
    <remap from="cloud_out" to="/kinect_mld_filtered" />
    <!--param name="sensor_frame" type="string" value="/head_mount_kinect_rgb_optical_frame" /-->
    <param name="sensor_frame" type="string" value="" />
    <param name="subsample_value" type="double" value=".005"/>                 
    <rosparam command="load" file="$(find figleaf_2d)/config/object_modeling_self_filter.yaml" />
  </node>

  <!-- Blur condition: Node that blurs the Kinect image. -->
  <node
    if="$(arg blur)"
    pkg="figleaf_2d"
    type="blur"
    name="kinect_blurrer"
    args="/head_mount_kinect/rgb/image_color /blurred_kinect_rgb" />

  <!-- Mid condition.
       1) Node that calls object segmentation repeatedly.
       2) Node that displays segmented objects as a point cloud. -->
  <node
    if="$(arg mid)"
    pkg="rviz_objdetect_caller"
    type="objdetect_caller_node"
    name="objdetect_caller_node" />
  <node
    if="$(arg mid)"
    pkg="rviz_objdetect_caller"
    type="publish_points_node"
    name="publish_points_node" />
  <node
    if="$(arg mid)"
    pkg="rviz_objdetect_caller"
    type="publish_table_node"
    name="publish_table_node" />
  <node
    if="$(arg mid)"
    pkg="figleaf_2d"
    type="slic_pixelate"
    name="slic_pixelate" />
  <node
    if="$(arg mid)"
    pkg="figleaf_2d"
    type="rotate_hue"
    name="figleaf_rotate_hue"
    args="/image_topic_2 /mid_2d_image" />
  
  <!-- Box condition.
       1) Node that calls object segmentation repeatedly.
       2) Node that displays segmented objects as boxes. -->
  <node
    if="$(arg box)"
    pkg="rviz_objdetect_caller"
    type="objdetect_caller_node"
    name="objdetect_caller_node" />
  <node
    if="$(arg box)"
    pkg="rviz_objdetect_caller"
    type="publish_boxes_node"
    name="publish_boxes_node" />
  <node
    if="$(arg box)"
    pkg="rviz_objdetect_caller"
    type="publish_table_node"
    name="publish_table_node" />

  <!-- rosbag recording node. -j option is for compression. -->
  <node
    pkg="rosbag"
    type="record"
    name="rosbag_record_exp"
    args="
      record -j -O $(arg data_dir)/$(arg user)_$(arg filter).bag
      pr2_marker_control_transparent/feedback
      rviz_camera_publisher/camera_pose
      head_mount_kinect/rgb/image_rect_color
      head_mount_kinect/depth_registered/image_rect" />

  <!-- Launches pr2_interactive_manipulation frontend with one of the
       figleaf_2d config files: {clean, blur, box}.rviz -->
  <include
    file="$(find pr2_interactive_manipulation_frontend)/launch/pr2_interactive_manipulation_desktop.launch">
    <arg
      name="rviz_config_file_base"
      value="$(find figleaf_2d)/config/$(arg filter).rviz" />
  </include>
</launch>
